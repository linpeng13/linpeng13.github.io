<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Anaconda 官方源下载慢的解决方案]]></title>
    <url>%2F2017%2F11%2F02%2FAnaconda-%E5%AE%98%E6%96%B9%E6%BA%90%E4%B8%8B%E8%BD%BD%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[下载安装Anaconda 后，需要下载pandas 等包，发现默认的官方源下载慢。搜索解决方案，发现TUNA 提供了Anaconda 仓库的镜像。按照指示步骤操作如下：12conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --set show_channel_urls yes 经测试，果然快了许多！ 上述2 行命令的效果，即修改文件～/.condarc 。该文件原内容是：123channels: - defaultsssl_verify: true 修改后（即执行命令后）内容是：12345channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ - defaultsssl_verify: trueshow_channel_urls: true]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Setting Custom domain]]></title>
    <url>%2F2017%2F09%2F23%2Fseting-custom-domain%2F</url>
    <content type="text"><![CDATA[我在阿里云上注册了一个域名 linziye.com ，希望能指向我的Github Pages 博客 linpeng13.github.io ，操作步骤如下： 劳资的域名 linpeng.com 已被注册，只好先用儿子的了 -_-!!! 第1步：创建CNAME 文件 我的Github Pages 博客采用Hexo 框架，故需要在source 目录下创建CNAME 文件。本质上就是在站点（推送到Github Pages 的博客站点）根目录下创建CNAME 文件。 CNAME 文件内容是linziye.com12$ cat CNAMElinziye.com Github Pages 服务器读取CNAME 之后，会设置linziye.com 为主域名（Custom domain），然后将linpeng13.github.io 重定向到linziye.com 。 第2步：域名解析 登录阿里云-&gt;管理控制台-&gt;域名，在linziye.com 域名解析设置中增加3条记录，即： 在域名解析中，A 记录就是直接指定一个IP ，CNAME 就是重命名，指向另一个域名。 在阿里云控制台，设置记录类型为A ，主机记录为@ ，记录值是IP 192.30.252.153 ，其中192.30.252.153 是Github Pages 服务器指定的IP地址，访问该IP地址即表示访问Github Pages ； 在阿里云控制台，设置记录类型为A ，主机记录为@ ，记录值是IP 192.30.252.154 ，原理同上； 在阿里云控制台，设置记录类型为CNAME ，主机记录为www ，记录值是linpeng13.github.io. ，注意记录值中.io 后面还有一个点. 第3步：等待DNS 配置生效 对DNS 的配置不是立即生效的，过10分钟再去访问域名 linziye.com ，看看是否配置成功]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[The Python Standard Library]]></title>
    <url>%2F2017%2F09%2F17%2Fthe-python-standard-library%2F</url>
    <content type="text"><![CDATA[《A Byte of Python》学习笔记 sys moduleThe sys module contains system-specific functionality. os moduleThe os module is used for interacting with the operating system. os.path.join() this function will ensure the full location matches the format expected by the operating system. platform moduleThe platform module is used for information about the platform i.e. the operating system. logging moduleThe logging module is used for logging information.]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python built-in data structures]]></title>
    <url>%2F2017%2F09%2F15%2Fpython-built-in-data-structures%2F</url>
    <content type="text"><![CDATA[《A Byte of Python》学习笔记 Data StructuresThere are four built-in data structures in Python - list, tuple, dictionary and set. Swaroop C HA Byte of Python ListA list is a data structure that holds an ordered collection of items Swaroop C HA Byte of Python Example (save as ds_using_list.py ): ds_using_list.py12345678910111213141516171819202122# This is my shopping listshoplist = ['apple', 'mango', 'carrot', 'banana']print('I have', len(shoplist), 'items to purchase.')print('These items are:', end=' ')for item in shoplist: print(item, end=' ')print('\nI also have to buy rice.')shoplist.append('rice')print('My shopping list is now', shoplist)print('I will sort my list now')shoplist.sort()print('Sorted shopping list is', shoplist)print('The first item I will buy is', shoplist[0])olditem = shoplist[0]del shoplist[0]print('I bought the', olditem)print('My shopping list is now', shoplist) Output: 12345678910$ python ds_using_list.pyI have 4 items to purchase.These items are: apple mango carrot bananaI also have to buy rice.My shopping list is now ['apple', 'mango', 'carrot', 'banana', 'rice']I will sort my list nowSorted shopping list is ['apple', 'banana', 'carrot', 'mango', 'rice']The first item I will buy is appleI bought the appleMy shopping list is now ['banana', 'carrot', 'mango', 'rice'] TupleTuples are used to hold together multiple objects. Think of them as similar to lists, but without the extensive functionality that the list class gives you. One major feature of tuples is that they are immutable like strings i.e. you cannot modify tuples. Swaroop C HA Byte of Python Example (save as ds_using_tuple.py ): ds_using_tuple.py12345678910111213# I would recommend always using parentheses# to indicate start and end of tuple# even though parentheses are optional.# Explicit is better than implicit.zoo = ('python', 'elephant', 'penguin')print('Number of animals in the zoo is', len(zoo))new_zoo = 'monkey', 'camel', zooprint('Number of cages in the new zoo is', len(new_zoo))print('All animals in new zoo are', new_zoo)print('Animals brought from old zoo are', new_zoo[2])print('Last animal brought from old zoo is', new_zoo[2][2])print('Number of animals in the new zoo is', len(new_zoo)-1+len(new_zoo[2])) Output: 1234567$ python ds_using_tuple.py Number of animals in the zoo is 3 Number of cages in the new zoo is 3 All animals in new zoo are ('monkey', 'camel', ('python', 'elephant', 'penguin')) Animals brought from old zoo are ('python', 'elephant', 'penguin') Last animal brought from old zoo is penguin Number of animals in the new zoo is 5 DictionaryA dictionary is like an address-book where you can find the address or contact details of a person by knowing only his/her name i.e. we associate keys (name) with values (details). Note that the key must be unique just like you cannot find out the correct information if you have two persons with the exact same name. Swaroop C HA Byte of Python Example (save as ds_using_dict.py ): ds_using_dict.py123456789101112131415161718192021222324# 'ab' is short for 'a'ddress'b'ook ab = &#123; 'Swaroop': 'swaroop@swaroopch.com', 'Larry': 'larry@wall.org', 'Matsumoto': 'matz@ruby-lang.org', 'Spammer': 'spammer@hotmail.com' &#125; print("Swaroop's address is", ab['Swaroop']) # Deleting a key-value pair del ab['Spammer'] print('\nThere are &#123;&#125; contacts in the address-book\n'.format(len(ab))) for name, address in ab.items(): print('Contact &#123;&#125; at &#123;&#125;'.format(name, address)) # Adding a key-value pair ab['Guido'] = 'guido@python.org' if 'Guido' in ab: print("\nGuido's address is", ab['Guido']) Output: 12345678910$ python ds_using_dict.py Swaroop's address is swaroop@swaroopch.com There are 3 contacts in the address-book Contact Swaroop at swaroop@swaroopch.com Contact Matsumoto at matz@ruby-lang.org Contact Larry at larry@wall.org Guido's address is guido@python.org SetSets are unordered collections of simple objects. These are used when the existence of an object in a collection is more important than the order or how many times it occurs. Swaroop C HA Byte of Python 123456789101112&gt;&gt;&gt; bri = set(['brazil', 'russia', 'india']) &gt;&gt;&gt; 'india' in bri True &gt;&gt;&gt; 'usa' in bri False &gt;&gt;&gt; bric = bri.copy() &gt;&gt;&gt; bric.add('china') &gt;&gt;&gt; bric.issuperset(bri) True &gt;&gt;&gt; bri.remove('russia') &gt;&gt;&gt; bri &amp; bric # OR bri.intersection(bric) &gt;&gt;&gt; &#123;'brazil', 'india'&#125;]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 系统用户登录调用的文件（或环境变量）]]></title>
    <url>%2F2017%2F09%2F05%2Fthe-ubuntu-system-user-logs-in-the-files-(or-environment-variables)-that-are-caled%2F</url>
    <content type="text"><![CDATA[调用顺序普通用户登录Ubuntu 系统一般会依次调用如下配置文件： /etc/environment：在登录时操作系统使用的第一个文件，设置系统默认的环境变量； /etc/profile：在登录时操作系统定制用户环境时使用的第二个文件，此文件为系统的每个用户设置默认的变量，当用户第一次登录时，该文件被执行； ~/.bash_profile：登录用户的环境变量设置； ~/.profile：登录用户环境变量设置（若不存在 ~/.bash_profile 文件时执行）； /etc/environment该文件默认的内容如下： 1PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games" 若需要配置系统用户均需要用到的环境变量，例如JAVA 相关，可增加如下内容： 12JAVA_HOME="/usr/jdk1.8.0_144"JRE_HOME="/usr/jdk1.8.0_144/jre" /etc/profile该文件默认的内容如下： 12345678910111213141516171819202122232425# /etc/profile: system-wide .profile file for the Bourne shell (sh(1))# and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).if [ "$PS1" ]; then if [ "$BASH" ] &amp;&amp; [ "$BASH" != "/bin/sh" ]; then # The file bash.bashrc already sets the default PS1. # PS1='\h:\w\$ ' if [ -f /etc/bash.bashrc ]; then . /etc/bash.bashrc fi else if [ "`id -u`" -eq 0 ]; then PS1='# ' else PS1='$ ' fi fifiif [ -d /etc/profile.d ]; then for i in /etc/profile.d/*.sh; do if [ -r $i ]; then . $i fi done unset ifi 该文件关键点分析如下： 若环境变量 BASH 存在且非 /bin/sh ，则执行配置文件 /etc/bash.bashrc ； 若不满足第1点，则按照root 用户为# ，其他用户为$ 设置提示符； 依次执行目录 /etc/profile.d 下的配置文件； ~/.profile该文件默认的内容如下： 1234567891011121314151617181920# ~/.profile: executed by the command interpreter for login shells.# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login# exists.# see /usr/share/doc/bash/examples/startup-files for examples.# the files are located in the bash-doc package.# the default umask is set in /etc/profile; for setting the umask# for ssh logins, install and configure the libpam-umask package.#umask 022# if running bashif [ -n "$BASH_VERSION" ]; then # include .bashrc if it exists if [ -f "$HOME/.bashrc" ]; then . "$HOME/.bashrc" fifi# set PATH so it includes user's private bin directoriesPATH="$HOME/bin:$HOME/.local/bin:$PATH" 注意如下说明： This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login exists.]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 系统用户和用户组]]></title>
    <url>%2F2017%2F09%2F05%2Fubuntu-system-user-and-user-groups%2F</url>
    <content type="text"><![CDATA[/etc/passwd查看Ubuntu 系统存在的用户信息，可执行： 1cat /etc/passwd 该文件每行代表一个用户，格式为：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell 例如：hadoop:x:1000:1000:hadoop-01,,,:/home/hadoop:/bin/bash 用户名：hadoop 口令：x（详见下节 “/etc/shadow”） 用户标识号：1000 组标识号：1000 注释性描述：hadoop-01,,, 主目录：/home/hadoop 登录Shell：/bin/bash /etc/shadowUnix系统最初是用明文保存密码的，后来由于安全的考虑，采用crypt() 算法加密密码并存放在 /etc/passwd 文件。现在，由于计算机处理能力的提高，使密码破解变得越来越容易。/etc/passwd 文件是所有合法用户都可访问的，大家都可互相看到密码的加密字符串，这给系统带来很大的安全威胁。现代的Unix系统使用影子密码系统，它把密码从/etc/passwd 文件中分离出来，真正的密码保存在/etc/shadow 文件中，该文件只能由超级用户访问。这样入侵者就不能获得加密密码串，用于破解。使用shadow 密码文件后，/etc/passwd 文件中所有帐户的password 域的内容为”x”，如果password 域的内容为”*”，则该帐号被停用。 格式为：username:password:last_change:min_change:max_change:warm:failed_expire:expiration:reserved 1sudo cat /etc/shadow 例如：hadoop:$1$dwXYMXgF$4Tqzw9pwsUCsYAWmJEgak/:17381:0:99999:7::: username：hadoop password：$1$dwXYMXgF$4Tqzw9pwsUCsYAWmJEgak/ last_change：17381（最近更改密码的日期，其是以1970年1月1日做为第1天，然后顺次相加） min_change：0（密码不可更改的天数，即如果你不想让某个用户频繁更改密码就可以把这个设成10000） max_change：99999（密码需要重新更改的天数，即密码在多少天内必须得改了） warm：7（密码更改期限前的警告日期） failed_expire：（密码过期的宽限时间） expiration：（账号失效时间） reserved： /etc/group查看Ubuntu 系统存在的组信息，可执行： 1cat /etc/group 该文件每行代表一个组，格式为：groupname:password:gid:members 例如：hadoop:x:1000: groupname：hadoop password：x（同上节 “/etc/shadow”） gid：组标识号 members：组内成员]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT主题文章页头页尾的一些设置]]></title>
    <url>%2F2017%2F09%2F03%2Fsome-hexo-next-set-the-page-header-foter.%2F</url>
    <content type="text"><![CDATA[页头NexT 主题的文章页面，默认只有【发表时间】和【分类】两项信息。若希望增加其他有意思的信息，得做一些设置。 阅读次数增加【阅读次数】信息，需要用到第三方的服务LeanCloud ，且需要修改主题配置文件themes/next/_config.yml 。详细的操作可参考这篇博文《leanCloud,实现文章阅读量统计》。 字数统计和阅读时长增加【字数统计】和【阅读时长】信息，需安装插件hexo-wordcount ，安装方法相对简单： 1234$ npm i --save hexo-wordcount## Node 版本7.6.0之前,请安装 2.x 版本 (Node.js v7.6.0 and previous)$ npm install hexo-wordcount@2 --save 然后在主题配置文件themes/next/_config.yml 中，找到字段 post_wordcount ，其设置块内容默认是： 12345678# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true wordcount: false min2read: false totalcount: false separated_meta: true 字段wordcount 是文章的字数统计，字段min2read是文章的阅读时长预估值，这两个值默认显示在文章开头（如图）。字段totalcount是整站的字数统计，默认显示在站点页面最下方。按需要将false 修改为true即可。 但默认开启的【字数统计】和【阅读时长】信息，是不包含单位的，故有强迫症的朋友，可以修订文件themes/next/layout/_macro/post.swig ，在wordcount(post.content) 所在行加(字) ，在min2read(post.content) 所在行加(分) 。 12345678910111213141516171819202122232425262728293031323334&#123;% if theme.post_wordcount.wordcount or theme.post_wordcount.min2read %&#125; &lt;div class="post-wordcount"&gt; &#123;% if theme.post_wordcount.wordcount %&#125; &#123;% if not theme.post_wordcount.separated_meta %&#125; &lt;span class="post-meta-divider"&gt;|&lt;/span&gt; &#123;% endif %&#125; &lt;span class="post-meta-item-icon"&gt; &lt;i class="fa fa-file-word-o"&gt;&lt;/i&gt; &lt;/span&gt; &#123;% if theme.post_wordcount.item_text %&#125; &lt;span class="post-meta-item-text"&gt;&#123;&#123; __('post.wordcount') &#125;&#125;&amp;#58;&lt;/span&gt; &#123;% endif %&#125; &lt;span title="&#123;&#123; __('post.wordcount') &#125;&#125;"&gt; &#123;&#123; wordcount(post.content) &#125;&#125;(字) &lt;/span&gt; &#123;% endif %&#125; &#123;% if theme.post_wordcount.wordcount and theme.post_wordcount.min2read %&#125; &lt;span class="post-meta-divider"&gt;|&lt;/span&gt; &#123;% endif %&#125; &#123;% if theme.post_wordcount.min2read %&#125; &lt;span class="post-meta-item-icon"&gt; &lt;i class="fa fa-clock-o"&gt;&lt;/i&gt; &lt;/span&gt; &#123;% if theme.post_wordcount.item_text %&#125; &lt;span class="post-meta-item-text"&gt;&#123;&#123; __('post.min2read') &#125;&#125; &amp;asymp;&lt;/span&gt; &#123;% endif %&#125; &lt;span title="&#123;&#123; __('post.min2read') &#125;&#125;"&gt; &#123;&#123; min2read(post.content) &#125;&#125;(分) &lt;/span&gt; &#123;% endif %&#125; &lt;/div&gt;&#123;% endif %&#125; 页尾NexT 主题的文章页面，想要在页尾增加文章的版权信息，如图： 在主题配置文件themes/next/_config.yml 中，找到字段post_copyright ，将enable 设置为true 即可。 其他从上述设置，不难发现NexT 主题文章页面设置的几个重要文件，即： _layout.swig -themes/next/layout/_layout.swig ，全局性的页面布局代码； post.swig -themes/next/layout/post.swig ，文章类型页面框架布局代码，其中调用了_macro/post.swig ； _macro/post.swig - themes/next/layout/_macro/post.swig` ，文章类型页面实际布局代码；]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>NexT</tag>
        <tag>LeanCloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github 搭建个人博客]]></title>
    <url>%2F2017%2F09%2F02%2Fhexo-github-build-personal-blog%2F</url>
    <content type="text"><![CDATA[Hexo 是一个快速、简洁且高效的博客框架，基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，并且只需一条指令即可部署到 GitHub Pages（或Heroku 等其他网站）。 使用Hexo+Github 搭建个人博客，简单来说分两步： 本地搭建Hexo 部署至Github 说明：本文环境基于macOS Sierra 且已安装git 。 本地搭建HexoHexo 是基于Node.js 环境，故搭建Hexo，即： 搭建Node.js 环境 安装Hexo 安装喜欢的 Theme 个性化配置 搭建Node.js 环境 Node Version Manager - Simple bash script to manage multiple active node.js versions 建议使用nvm 工具安装并操控Node.js 环境，步骤如下： 在个人Home 目录安装 nvm 12$ cd ~/$ git clone https://github.com/creationix/nvm.git .nvm 在~/.bash_profile 中增加nvm 环境变量 1source ~/.nvm/nvm.sh 执行source ~/.bash_profile 使环境变量生效 使用nvm 安装Node.js 环境（可同时安装多个版本的Node.js ，并使用步骤5 的命令指定当前使用的版本） 12345## List remote versions available for install$ nvm ls-remote## Download and install version 6.11.2$ nvm install v6.11.2 使用nvm 工具选择当前使用的Node.js 环境 12345## List installed versions$ nvm ls## Modify PATH to use version 6.11.2$ nvm use v6.11.2 上述步骤已完成Node.js 环境安装及当前使用的Node.js 环境设置。以下是nvm 使用技巧说明： 常用的nvm 命令 1234567891011## List remote versions available for install$ nvm ls-remote## Download and install a &lt;version&gt;$ nvm install &lt;version&gt;## List installed versions$ nvm ls## Modify PATH to use &lt;version&gt;.$ nvm use &lt;version&gt; npm 更新慢问题解决 Node.js 采用npm（Node Package Manager）工具进行Node 程序包管理。但npm 默认采用国外的镜像点，更新较慢，可更换为淘宝镜像点。 123456789$ npm config ls -l|grep registryregistry = "https://registry.npmjs.org/"$ npm config set registry https://registry.npm.taobao.org$ npm config ls -l|grep registryregistry = "https://registry.npm.taobao.org/"; registry = "https://registry.npmjs.org/" (overridden) $ npm update 更新npm 工具 1234$ npm install npm@latest -g## 查看npm 版本$ npm -v 安装Hexo安装Hexo 步骤如下： 1234$ npm install hexo-cli -g$ hexo init [blog-site-folder]$ cd [blog-site-folder]$ npm install 说明：使用npm 下载安装Hexo 程序，选项参数-g的作用是将Hexo 程序安装在当前Node.js 环境中，例如~/.nvm/versions/node/v6.11.2/lib/node_modules 。 常用的Hexo 命令： 123456789101112131415161718192021222324252627282930## 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。$ hexo init [folder]## 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。## 如果标题包含空格的话，请使用引号括起来。$ hexo new [layout] &lt;title&gt;## 生成静态文件## 若附加选项参数"-d" 或"--deploy" ，即文件生成后立即部署网站## 若附加选项参数"-w" 或"--watch" ，即监视文件变动## 可以简写为"hexo g"$ hexo generate## 发表草稿$ hexo publish [layout] &lt;filename&gt;## 启动服务器。默认情况下，访问网址为： http://localhost:4000/## 可以简写为"hexo s"$ hexo server## 部署网站## 可以简写为"hexo d"$ hexo deploy## 清除缓存文件 (db.json) 和已生成的静态文件 (public)。## 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。$ hexo clean## 显示 Hexo 版本$ hexo version 插播一个有用的npm 命令 1234## 查看Hexo 站点安装了哪些node 程序包## `--depth` 表示检索深度为0，即不显示其依赖包$ cd [blog-site-folder]$ npm list --depth=0 安装喜欢的 ThemeHexo 默认的Theme 是landscape ，显然还有更好的选择。Hexo Github 给出了”Hexo top 10 themes“ 。 我这里选择下载Hexo NexT 最新主题 12$ cd [your-hexo-site]$ git clone https://github.com/iissnan/hexo-theme-next themes/next 当然，若是希望升级Hexo NexT 主题，可执行 12$ cd themes/next$ git pull 启用Hexo NexT Theme ，在站点配置文件_config.yml 找到 theme 字段，并将其值更改为 next1theme: next 个性化配置站点和主题的个性化配置，可分别参考Hexo 中文官网 和NexT, Elegant Theme for Hexo 。 部署至Github 首先在Github 上注册一个账号，并建立GitHub Pages Repository ，该仓库名必须是your_user_name.github.io 本地生成ssh 公私钥，并将公钥复制到Github 个人帐户SSH keys中 12$ cd ~$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com" 执行上述ssh-keygen 命令，会以交互式要求输入文件名（不输入直接Enter，默认生成的公私钥文件名分别是id_rsa.pub 和id_rsa）和密码。 将公钥文件（例如id_rsa.pub ）中的内容拷贝至Github -&gt; Settings -&gt; SSH and GPG keys -&gt; SSH Keys 修订站点配置文件_config.yml 12$ cd [your-hexo-site]$ vi _config.yml 找到deploy 字段，作如下修改 1234deploy: type: git repository: git@github.com:&lt;your_user_name&gt;/&lt;your_user_name&gt;.github.io.git branch: master 部署Hexo 站点到Github 123$ cd [your-hexo-site]$ npm install hexo-deployer-git --save$ hexo deploy Plugins hexo-deployer-git: Git deployer plugin for Hexo. hexo-translate-title: translate the chinese title of Hexo blog to english words automatially hexo-wordcount: Word Count Plugin for Hexo. hexo-generator-searchdb: A plugin to generate the site’s search data hexo-generator-seo-friendly-sitemap: Generate SEO-friendly sitemap. 参考链接 nvm in Github Node.js 官网 Node.js 中文官网 npm 官网 npm 淘宝镜像点 Hexo 中文官网 Hexo in Github Hexo top 10 themes NexT, Elegant Theme for Hexo github认证，ssh配置 Font Awesome]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux iptables设置]]></title>
    <url>%2F2016%2F05%2F19%2Flinux-iptables-setings%2F</url>
    <content type="text"><![CDATA[屏蔽指定IP以屏蔽IP： 192.168.184.13 为例 方法1：命令行1sudo iptables -I INPUT -s 192.168.184.13 -j DROP 说明：该方法临时修改防火墙配置，iptables服务重启后失效 方法2：修改 iptables 文件 打开 /etc/sysconfig/iptables 文件 增加一行 -A INPUT -s 192.168.184.13/32 -j DROP 说明：该方法永久有效]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【学习】慕课网-在Ubuntu Server下搭建LAMP环境]]></title>
    <url>%2F2016%2F03%2F22%2F%5Bstudy%5D-mu-course-network-build-a-lamp-environment-in-ubuntu-server%2F</url>
    <content type="text"><![CDATA[慕课网-在Ubuntu Server下搭建LAMP环境课程链接 2-1 性感的Ubuntu Server操作系统 LTS:Long Term Support(长期支持版本) 该课程使用Ubuntu Server环境版本是 LTS 12.04 4-1 使用apt-get工具安装Apache PHP MySQL Ubuntu 使用 apt-get 命令获取并安装软件安装包 检查Apache是否已加载php5_module模块，执行命令 1cat /etc/apache2/mods-enabled/php5.load 如果出现如下提示，说明已加载 1LoadModule php5_module /usr/lib/apache2/modules/libphp5.so 检查PHP是否已安装加载MYSQL.so扩展，执行命令 1cat /etc/php5/conf.d/mysql.ini 若存在该文件，且显示如下提示，说明已加载 1extension=mysql.so 4-3 给PHP添加常用扩展 安装了GD库和CURL（需了解是什么） 5-3 LAMP环境配置文件详解 Apache 配置文件加载流程通过 apache.conf 加载：conf.d/httpd.confports.confmods-enabled/sites-enabled/* MySQL 核心配置文件 my.cnf PHP 核心配置文件 php.ini 5-7 在Apache中配置虚拟主机在Ubuntu Server操作系统中，有一些软件的敏感操作受到 apparmore 的约束（apparmore是系统安全应用），apparmore关于mysql安全操作的配置文件路径是： 1/etc/apparmore.d/usr.sbin.mysqld 5-8 MySQL数据存储目录迁移默认情况下，mysql的数据存储目录是 /var/lib/mysql 5-11 开启MySQL的remote access软件： navicat]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
        <tag>Apache</tag>
        <tag>MySQL</tag>
        <tag>PHP</tag>
        <tag>慕课网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux中shell变量含义]]></title>
    <url>%2F2016%2F03%2F18%2Fthe-meaning-of-the-shel-variable-in-linux%2F</url>
    <content type="text"><![CDATA[shell变量 $$含义：shell本身的PID（ProcessID） 1234567$ cat test.sh#!/bin/bash#printf "this is %s\n" "$$"$ bash test.sh aaathis is 2638 shell变量 $@含义：所有参数列表。如果”$@”用引号(“”)括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数 123456789$ cat test.sh#!/bin/bash#printf "this is %s\n" "$@"$ bash test.sh aaa bbb cccthis is aaathis is bbbthis is ccc shell变量 $*含义：所有参数列表。如果”$*”用引号(“”)括起来的情况、以”$1 $2 … $n” 的形式输出所有参数 1234567$ cat test.sh#!/bin/bash#printf "this is %s\n" "$*"$ bash test.sh aaa bbb cccthis is aaa bbb ccc shell变量 $#含义：shell参数个数 1234567$ cat test.sh#!/bin/bash#printf "this is %s\n" "$#"$ bash test.sh aaa bbb cccthis is 3]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo发布新文章]]></title>
    <url>%2F2016%2F01%2F08%2Fhexo-releases-new-articles%2F</url>
    <content type="text"><![CDATA[发布新文章到我的github步骤 新建文章文件 123hexo new [layout] &lt;title&gt;# orhexo n [layout] &lt;title&gt; 生成静态文件 123hexo generate# orhexo g 发布站点 123hexo deploy# orhexo d 参考 hexo官网 NexT theme]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx install]]></title>
    <url>%2F2016%2F01%2F08%2Fnginx-instal%2F</url>
    <content type="text"><![CDATA[环境：OS X Yosemite(10.10.5) 下载PCRE和nginx 安装PCRE 12345$ tar xvzf pcre-8.5$ cd pcre-8.5$ sudo ./configure --prefix=/usr/local$ sudo make$ sudo make install 安装nginx 12345$ tar xvzf nginx-1.6.0.tar.gz$ cd nginx-1.6.0$ sudo ./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-cc-opt="-Wno-deprecated-declarations"$ sudo make$ sudo make install 开启nginx 将 /usr/local/nginx/sbin 加入到环境变量里，执行命令： 1$ sudo nginx 打开浏览器 http://localhost ，看到“Welcome to nginx!”字样，说明nginx安装启动成功 关闭nginx 1$ sudo nginx -s stop 重启nginx（有用的指令之一） 1$ sudo nginx -s reload 判断配置文件是否正确（有用的指令之一） 1$ sudo nginx -t]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>OS X</tag>
      </tags>
  </entry>
</search>
